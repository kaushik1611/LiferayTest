/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.inexture.csvimporter.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.inexture.csvimporter.model.Goods;
import com.inexture.csvimporter.model.GoodsModel;
import com.inexture.csvimporter.model.GoodsSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Goods service. Represents a row in the &quot;TEST_Goods&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link GoodsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GoodsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see GoodsImpl
 * @see Goods
 * @see GoodsModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class GoodsModelImpl extends BaseModelImpl<Goods> implements GoodsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a goods model instance should use the {@link Goods} interface instead.
	 */
	public static final String TABLE_NAME = "TEST_Goods";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "goodsId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "length", Types.DOUBLE },
			{ "height", Types.DOUBLE },
			{ "area", Types.DOUBLE },
			{ "nr", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("goodsId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("length", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("height", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("area", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("nr", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table TEST_Goods (uuid_ VARCHAR(75) null,goodsId LONG not null primary key,name VARCHAR(500) null,description TEXT null,length DOUBLE,height DOUBLE,area DOUBLE,nr TEXT null)";
	public static final String TABLE_SQL_DROP = "drop table TEST_Goods";
	public static final String ORDER_BY_JPQL = " ORDER BY goods.name ASC";
	public static final String ORDER_BY_SQL = " ORDER BY TEST_Goods.name ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.inexture.csvimporter.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.inexture.csvimporter.model.Goods"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.inexture.csvimporter.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.inexture.csvimporter.model.Goods"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.inexture.csvimporter.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.inexture.csvimporter.model.Goods"),
			true);
	public static final long NAME_COLUMN_BITMASK = 1L;
	public static final long UUID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Goods toModel(GoodsSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Goods model = new GoodsImpl();

		model.setUuid(soapModel.getUuid());
		model.setGoodsId(soapModel.getGoodsId());
		model.setName(soapModel.getName());
		model.setDescription(soapModel.getDescription());
		model.setLength(soapModel.getLength());
		model.setHeight(soapModel.getHeight());
		model.setArea(soapModel.getArea());
		model.setNr(soapModel.getNr());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Goods> toModels(GoodsSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Goods> models = new ArrayList<Goods>(soapModels.length);

		for (GoodsSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.inexture.csvimporter.service.util.ServiceProps.get(
				"lock.expiration.time.com.inexture.csvimporter.model.Goods"));

	public GoodsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _goodsId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setGoodsId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _goodsId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Goods.class;
	}

	@Override
	public String getModelClassName() {
		return Goods.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("goodsId", getGoodsId());
		attributes.put("name", getName());
		attributes.put("description", getDescription());
		attributes.put("length", getLength());
		attributes.put("height", getHeight());
		attributes.put("area", getArea());
		attributes.put("nr", getNr());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long goodsId = (Long)attributes.get("goodsId");

		if (goodsId != null) {
			setGoodsId(goodsId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Double length = (Double)attributes.get("length");

		if (length != null) {
			setLength(length);
		}

		Double height = (Double)attributes.get("height");

		if (height != null) {
			setHeight(height);
		}

		Double area = (Double)attributes.get("area");

		if (area != null) {
			setArea(area);
		}

		String nr = (String)attributes.get("nr");

		if (nr != null) {
			setNr(nr);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getGoodsId() {
		return _goodsId;
	}

	@Override
	public void setGoodsId(long goodsId) {
		_goodsId = goodsId;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask = -1L;

		if (_originalName == null) {
			_originalName = _name;
		}

		_name = name;
	}

	public String getOriginalName() {
		return GetterUtil.getString(_originalName);
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public double getLength() {
		return _length;
	}

	@Override
	public void setLength(double length) {
		_length = length;
	}

	@JSON
	@Override
	public double getHeight() {
		return _height;
	}

	@Override
	public void setHeight(double height) {
		_height = height;
	}

	@JSON
	@Override
	public double getArea() {
		return _area;
	}

	@Override
	public void setArea(double area) {
		_area = area;
	}

	@JSON
	@Override
	public String getNr() {
		if (_nr == null) {
			return StringPool.BLANK;
		}
		else {
			return _nr;
		}
	}

	@Override
	public void setNr(String nr) {
		_nr = nr;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Goods.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Goods toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Goods)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		GoodsImpl goodsImpl = new GoodsImpl();

		goodsImpl.setUuid(getUuid());
		goodsImpl.setGoodsId(getGoodsId());
		goodsImpl.setName(getName());
		goodsImpl.setDescription(getDescription());
		goodsImpl.setLength(getLength());
		goodsImpl.setHeight(getHeight());
		goodsImpl.setArea(getArea());
		goodsImpl.setNr(getNr());

		goodsImpl.resetOriginalValues();

		return goodsImpl;
	}

	@Override
	public int compareTo(Goods goods) {
		int value = 0;

		value = getName().compareTo(goods.getName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Goods)) {
			return false;
		}

		Goods goods = (Goods)obj;

		long primaryKey = goods.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		GoodsModelImpl goodsModelImpl = this;

		goodsModelImpl._originalUuid = goodsModelImpl._uuid;

		goodsModelImpl._originalName = goodsModelImpl._name;

		goodsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Goods> toCacheModel() {
		GoodsCacheModel goodsCacheModel = new GoodsCacheModel();

		goodsCacheModel.uuid = getUuid();

		String uuid = goodsCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			goodsCacheModel.uuid = null;
		}

		goodsCacheModel.goodsId = getGoodsId();

		goodsCacheModel.name = getName();

		String name = goodsCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			goodsCacheModel.name = null;
		}

		goodsCacheModel.description = getDescription();

		String description = goodsCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			goodsCacheModel.description = null;
		}

		goodsCacheModel.length = getLength();

		goodsCacheModel.height = getHeight();

		goodsCacheModel.area = getArea();

		goodsCacheModel.nr = getNr();

		String nr = goodsCacheModel.nr;

		if ((nr != null) && (nr.length() == 0)) {
			goodsCacheModel.nr = null;
		}

		return goodsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", goodsId=");
		sb.append(getGoodsId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", length=");
		sb.append(getLength());
		sb.append(", height=");
		sb.append(getHeight());
		sb.append(", area=");
		sb.append(getArea());
		sb.append(", nr=");
		sb.append(getNr());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.inexture.csvimporter.model.Goods");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>goodsId</column-name><column-value><![CDATA[");
		sb.append(getGoodsId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>length</column-name><column-value><![CDATA[");
		sb.append(getLength());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>height</column-name><column-value><![CDATA[");
		sb.append(getHeight());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>area</column-name><column-value><![CDATA[");
		sb.append(getArea());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nr</column-name><column-value><![CDATA[");
		sb.append(getNr());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Goods.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Goods.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _goodsId;
	private String _name;
	private String _originalName;
	private String _description;
	private double _length;
	private double _height;
	private double _area;
	private String _nr;
	private long _columnBitmask;
	private Goods _escapedModel;
}